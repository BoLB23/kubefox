syntax = "proto3";

package kubefox.proto.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/xigxog/kubefox/libs/core/grpc";

message EventContext {
  // string organization = 1;
  string platform = 2;
  string environment = 3;
  string system = 4;
  string app = 5;
}

message Fabric {
  map<string, google.protobuf.Value> config = 1;
  map<string, google.protobuf.Value> secrets = 2;
  map<string, google.protobuf.Value> env_vars = 3;
}

message Component {
  string app = 1;
  string name = 2;
  string git_hash = 3;
  string id = 4;
}

message Token {
  string id = 1;
  string issuer = 2;
  string subject = 3;
  repeated string audience = 4;
  google.protobuf.Timestamp issued_at = 5;
  google.protobuf.Timestamp not_before = 6;
  google.protobuf.Timestamp expiration = 7;

  map<string, google.protobuf.Value> private_claims = 14;
}

message Span {
  string trace_id = 1;
  string span_id = 2;
  bytes trace_flags = 3;
}

message Data {
  string type = 1;

  string id = 2;
  string parent_id = 3;
  EventContext context = 4;
  Fabric fabric = 5;

  Token token = 6;
  map<string, google.protobuf.Value> args = 7;
  map<string, google.protobuf.Value> values = 8;

  Span span = 9;

  Component source = 10;
  Component target = 11;

  string content_type = 14;
  bytes content = 15;
}

message ConfigRequest {}

message ComponentConfig {
  // string organization = 1;
  string platform = 2;
  bool dev_mode = 3;

  Component component = 14;
}

message SubscribeRequest { string id = 1; }

message TelemetryRequest {}

message TelemetryResponse { bool healthy = 1; }

message Ack {}

service ComponentService {
  rpc InvokeTarget(Data) returns (Data);
  rpc SendResponse(Data) returns (Ack);
  rpc Subscribe(SubscribeRequest) returns (stream Data);
  rpc Unsubscribe(SubscribeRequest) returns (Ack);
  rpc GetConfig(ConfigRequest) returns (ComponentConfig);
}

service RuntimeService { 
  rpc Invoke(Data) returns (Data);
}
